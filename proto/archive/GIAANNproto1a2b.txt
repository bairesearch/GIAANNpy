DONE//do: 
o1 preview prompt 1a2b;
Please create an abstract biological neural neural network simulation for natural language processing in python. This is the specificiation:
- Use the pytorch API for hardware acceleration of all arrays (for efficient parallel processing of connectivity). Do not initialise the array with a predetermined dictionary; dynamically populate the arrays as new dictionary words and relations are encountered. Will be discussed below.
- Use vector graphics library such as networkx to always maintain a complete visualisation of the network (including active neurons). Only draw the parts of the network that are not empty.
- The application continuously reads sentences from a large textual corpus from huggingface (such as a Wikpedia dataset). Please use the library nltk.
- It identifies all possible POS (parts of speech) tags of each word in a sentence. Some words may have more than one possible POS tag. Please use the library spacy. 
- Each word is stored in a unique column (dictionary of columns for each word in dataset). Maintain an array of n column, each of size y, where y is the number of neurons per column. 
- Each column represents a unique concept. Columns which represent identical concepts can be merged at a later time; we will ignore column merging for now (such as "next_to" and "near"). We will also ignore the fact words can have multiple meanings for now (i.e. words can represent independent concepts).
- The columns represent general concepts, but they can also represent more specific concepts or instances by incorporating relations, such as actions (verbs) and conditions (prepositions). Examples of action relations (verbs) include "run" or eat. Examples of conditional relations (prepositions) include "near" or "above. The relations are each assigned a unique relation neuron (verb or preposition), and are connected to any number of target concept nouns (in separate columns); e.g. "bone", "to" etc
- The columns typically represent substances (or nouns), but they can also represent actions or conditions (verbs or prepositions). Only in the case of multiword prepositions (e.g. "next to") or multiword verbs (i.e. phrasal verb) (e.g. "look up") do action and condition columns have relations; e.g. "to" in "run to the park"
- determiners are ignored for now ("the", "a" etc)
- To connect relation nodes to their concept (subject) and their target (object), a natural language processor is required. Since we are simulating the creation of an abstract biological neural network, we will implement our own custom learning algorithm for associating (connecting) these nodes. Since we do not have a syntactical breakdown of sentences, we will infer that any verb/preposition that occurs after a noun word (or directly after another verb/preposition word) in a sentence is possibly connected to that word. 
- The closer the words occur in a sentence, the more likely they are to be connected, but this is not always the case. Consider an example of an exception; "the cat that ate the mouse ran to the park": in this example "ran" and "ate" are directly connected to "cat", "ran" is not directly connected to "mouse" despite being nearest to it. Therefore, we will temporarily connect every word that occurs after a column concept word in the sentence to that column concept word. 
- You should be aware this this will generate a large set of word associations for each concept word similar to historic NLP algorithms like the word co-occurance matrix. For now just instantiate every possible relation neuron for every concept neuron in the sentence. Importantly, note that the relation neurons for a given action/condition (verb/preposition) are stored in a previous concept neuron column (e.g. "dog"), not in their own concept neuron column (e.g. "ate"). E.g. a column containing concept neuron "dog" will also contain relation neurons "ran" and "ate". The relation neurons "ran" and "ate" will be connected to targets concept columns "mouse", "park".
- Generate all necessary code to run the abstract biological neural network simulation. Visualise the complete graph every time a new sentence is parsed by the application. Pause the simulation after every sentence, and accept any key to continue the simulation. Let the user exit the simulation at any sentence by pressing Ctrl-D.
- The columns should be visualised along the horizontal x axis (they should each be a tall rectangle). Each concept word neuron should be stored at the bottom of each column. The relation neurons should be stored along the vertical y axis of each column, above the concept neurons. Only draw the connections between the relation neurons and their target (object), not their source concept neuron (subject).  
- Please draw separate rectangles for each concept column. The concept column rectangles need to be drawn around the contents (concept and relation neurons) of each column. Ensure the neuron sizes are too large to be encapsulated by the rectangles and all the neurons (including the relation neurons) are drawin within the column rectangles.

Thank you. Can you please add to the specification;
- Every relation neuron in a concept column has an integer permanence value (initialised as 3). A relation neuron's permanence integer is increased by 3 every time the concept column neuron is activated by a sentence with that particular relation neuron being activated.  A relation neuron's permanence integer is decreased by 1 every time the concept column neuron is activated by a sentence without that particular relation neuron being activated. If a relation neuron's permanence decreases to 0, then the relation neuron is removed from the column and it will no longer be visualised.

I get an error executing "G.remove_node(relation_neuron_id)";

Traceback (most recent call last):
  File "/home/user/anaconda3/envs/pytorchsenv/lib/python3.12/site-packages/networkx/classes/graph.py", line 676, in remove_node
    nbrs = list(adj[n])  # list handles self-loops (allows mutation)
                ~~~^^^
KeyError: 187

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/media/user/large/source/ANNpython/GIAANNpy/GIAANNproto1a2b.py", line 167, in <module>
    G.remove_node(relation_neuron_id)
  File "/home/user/anaconda3/envs/pytorchsenv/lib/python3.12/site-packages/networkx/classes/graph.py", line 679, in remove_node
    raise NetworkXError(f"The node {n} is not in the graph.") from err
networkx.exception.NetworkXError: The node 187 is not in the graph.
